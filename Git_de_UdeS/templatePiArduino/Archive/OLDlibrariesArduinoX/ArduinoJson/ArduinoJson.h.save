// ArduinoJson - arduinojson.org

// Copyright Benoit Blanchon 2014-2018

// MIT License



#pragma once



#ifdef __cplusplus



#include <stddef.h>  // for size_t

#include <stdint.h>  // for uint8_t

#include <string.h>

namespace ArduinoJson {

namespace Internals {

class NonCopyable {

 protected:

  NonCopyable() {}

 private:

  NonCopyable(const NonCopyable&);

  NonCopyable& operator=(const NonCopyable&);

};

}

}

#ifndef ARDUINOJSON_EMBEDDED_MODE

#if defined(ARDUINO) || defined(__IAR_SYSTEMS_ICC__) || defined(__XC) || \

    defined(__ARMCC_VERSION)

#define ARDUINOJSON_EMBEDDED_MODE 1

#else

#define ARDUINOJSON_EMBEDDED_MODE 0

#endif

#endif

#if ARDUINOJSON_EMBEDDED_MODE

#ifndef ARDUINOJSON_USE_DOUBLE

#define ARDUINOJSON_USE_DOUBLE 0

#endif

#ifndef ARDUINOJSON_USE_LONG_LONG

#define ARDUINOJSON_USE_LONG_LONG 0

#endif

#ifndef ARDUINOJSON_USE_INT64

#define ARDUINOJSON_USE_INT64 0

#endif

#ifndef ARDUINOJSON_ENABLE_STD_STRING

#define ARDUINOJSON_ENABLE_STD_STRING 0

#endif

#ifndef ARDUINOJSON_ENABLE_STD_STREAM

#define ARDUINOJSON_ENABLE_STD_STREAM 0

#endif

#ifndef ARDUINOJSON_DEFAULT_NESTING_LIMIT

#define ARDUINOJSON_DEFAULT_NESTING_LIMIT 10

#endif

#else  // ARDUINOJSON_EMBEDDED_MODE

#ifndef ARDUINOJSON_USE_DOUBLE

#define ARDUINOJSON_USE_DOUBLE 1

#endif

#ifndef ARDUINOJSON_USE_LONG_LONG

#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1800)

#define ARDUINOJSON_USE_LONG_LONG 1

#else

#define ARDUINOJSON_USE_LONG_LONG 0

#endif

#endif

#ifndef ARDUINOJSON_USE_INT64

#if defined(_MSC_VER) && _MSC_VER <= 1700

#define ARDUINOJSON_USE_INT64 1

#else

#define ARDUINOJSON_USE_INT64 0

#endif

#endif

#ifndef ARDUINOJSON_ENABLE_STD_STRING

#define ARDUINOJSON_ENABLE_STD_STRING 1

#endif

#ifndef ARDUINOJSON_ENABLE_STD_STREAM

#define ARDUINOJSON_ENABLE_STD_STREAM 1

#endif

#ifndef ARDUINOJSON_DEFAULT_NESTING_LIMIT

#define ARDUINOJSON_DEFAULT_NESTING_LIMIT 50

#endif

#endif  // ARDUINOJSON_EMBEDDED_MODE

#ifdef ARDUINO

#ifndef ARDUINOJSON_ENABLE_ARDUINO_STRING

#define ARDUINOJSON_ENABLE_ARDUINO_STRING 1

#endif

#ifndef ARDUINOJSON_ENABLE_ARDUINO_STREAM

#define ARDUINOJSON_ENABLE_ARDUINO_STREAM 1

#endif

#else  // ARDUINO

#ifndef ARDUINOJSON_ENABLE_ARDUINO_STRING

#define ARDUINOJSON_ENABLE_ARDUINO_STRING 0

#endif

#ifndef ARDUINOJSON_ENABLE_ARDUINO_STREAM

#define ARDUINOJSON_ENABLE_ARDUINO_STREAM 0

#endif

#endif  // ARDUINO

#ifndef ARDUINOJSON_ENABLE_PROGMEM

#ifdef PROGMEM

#define ARDUINOJSON_ENABLE_PROGMEM 1

#else

#define ARDUINOJSON_ENABLE_PROGMEM 0

#endif

#endif

#ifndef ARDUINOJSON_ENABLE_ALIGNMENT

#ifdef ARDUINO_ARCH_AVR

#define ARDUINOJSON_ENABLE_ALIGNMENT 0

#else

#define ARDUINOJSON_ENABLE_ALIGNMENT 1

#endif

#endif

#ifndef ARDUINOJSON_ENABLE_DEPRECATED

#define ARDUINOJSON_ENABLE_DEPRECATED 1

#endif

#ifndef ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD

#define ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD 1e7

#endif

#ifndef ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD

#define ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD 1e-5

#endif

#if ARDUINOJSON_USE_LONG_LONG && ARDUINOJSON_USE_INT64

#error ARDUINOJSON_USE_LONG_LONG and ARDUINOJSON_USE_INT64 cannot be set together

#endif

namespace ArduinoJson {

namespace Internals {

#if ARDUINOJSON_USE_DOUBLE

typedef double JsonFloat;

#else

typedef float JsonFloat;

#endif

}

}

namespace ArduinoJson {

namespace Internals {

#if ARDUINOJSON_USE_LONG_LONG

typedef long long JsonInteger;

typedef unsigned long long JsonUInt;

#elif ARDUINOJSON_USE_INT64

typedef __int64 JsonInteger;

typedef unsigned _int64 JsonUInt;

#else

typedef long JsonInteger;

typedef unsigned long JsonUInt;

#endif

}

}

namespace ArduinoJson {

class JsonArray;

class JsonObject;

namespace Internals {

union JsonVariantContent {

  JsonFloat asFloat;     // used for double and float

  JsonUInt asInteger;    // used for bool, char, short, int and longs

  const char* asString;  // asString can be null

  JsonArray* asArray;    // asArray cannot be null

  JsonObject* asObject;  // asObject cannot be null

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct JsonVariantDefault {

  static T get() {

    return T();

  }

};

template <typename T>

struct JsonVariantDefault<const T> : JsonVariantDefault<T> {};

template <typename T>

struct JsonVariantDefault<T&> : JsonVariantDefault<T> {};

}

}

namespace ArduinoJson {

class JsonArray;

class JsonObject;

namespace Internals {

enum JsonVariantType {

  JSON_UNDEFINED,         // JsonVariant has not been initialized

  JSON_UNPARSED,          // JsonVariant contains an unparsed string

  JSON_STRING,            // JsonVariant stores a const char*

  JSON_BOOLEAN,           // JsonVariant stores a bool

  JSON_POSITIVE_INTEGER,  // JsonVariant stores an JsonUInt

  JSON_NEGATIVE_INTEGER,  // JsonVariant stores an JsonUInt that must be negated

  JSON_ARRAY,             // JsonVariant stores a pointer to a JsonArray

  JSON_OBJECT,            // JsonVariant stores a pointer to a JsonObject

  JSON_FLOAT              // JsonVariant stores a JsonFloat

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct JsonVariantAs {

  typedef T type;

};

template <>

struct JsonVariantAs<char*> {

  typedef const char* type;

};

template <>

struct JsonVariantAs<JsonArray> {

  typedef JsonArray& type;

};

template <>

struct JsonVariantAs<const JsonArray> {

  typedef const JsonArray& type;

};

template <>

struct JsonVariantAs<JsonObject> {

  typedef JsonObject& type;

};

template <>

struct JsonVariantAs<const JsonObject> {

  typedef const JsonObject& type;

};

}

}

#ifdef _MSC_VER  // Visual Studio

#define FORCE_INLINE  // __forceinline causes C4714 when returning std::string

#define NO_INLINE __declspec(noinline)

#define DEPRECATED(msg) __declspec(deprecated(msg))

#elif defined(__GNUC__)  // GCC or Clang

#define FORCE_INLINE __attribute__((always_inline))

#define NO_INLINE __attribute__((noinline))

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)

#define DEPRECATED(msg) __attribute__((deprecated(msg)))

#else

#define DEPRECATED(msg) __attribute__((deprecated))

#endif

#else  // Other compilers

#define FORCE_INLINE

#define NO_INLINE

#define DEPRECATED(msg)

#endif

namespace ArduinoJson {

namespace Internals {

template <typename TImpl>

class JsonVariantCasts {

 public:

#if ARDUINOJSON_ENABLE_DEPRECATED

  DEPRECATED("use as<JsonArray>() instead")

  FORCE_INLINE JsonArray &asArray() const {

    return impl()->template as<JsonArray>();

  }

  DEPRECATED("use as<JsonObject>() instead")

  FORCE_INLINE JsonObject &asObject() const {

    return impl()->template as<JsonObject>();

  }

  DEPRECATED("use as<char*>() instead")

  FORCE_INLINE const char *asString() const {

    return impl()->template as<const char *>();

  }

#endif

  FORCE_INLINE operator JsonArray &() const {

    return impl()->template as<JsonArray &>();

  }

  FORCE_INLINE operator JsonObject &() const {

    return impl()->template as<JsonObject &>();

  }

  template <typename T>

  FORCE_INLINE operator T() const {

    return impl()->template as<T>();

  }

 private:

  const TImpl *impl() const {

    return static_cast<const TImpl *>(this);

  }

};

}

}

namespace ArduinoJson {

namespace Internals {

template <bool Condition, typename T = void>

struct EnableIf {};

template <typename T>

struct EnableIf<true, T> {

  typedef T type;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename TBase, typename TDerived>

class IsBaseOf {

 protected:  // <- to avoid GCC's "all member functions in class are private"

  typedef char Yes[1];

  typedef char No[2];

  static Yes &probe(const TBase *);

  static No &probe(...);

 public:

  enum {

    value = sizeof(probe(reinterpret_cast<TDerived *>(0))) == sizeof(Yes)

  };

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T, typename U>

struct IsSame {

  static const bool value = false;

};

template <typename T>

struct IsSame<T, T> {

  static const bool value = true;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct IsChar {

  static const bool value = IsSame<T, char>::value ||

                            IsSame<T, signed char>::value ||

                            IsSame<T, unsigned char>::value;

};

template <typename T>

struct IsChar<const T> : IsChar<T> {};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct IsConst {

  static const bool value = false;

};

template <typename T>

struct IsConst<const T> {

  static const bool value = true;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct RemoveReference {

  typedef T type;

};

template <typename T>

struct RemoveReference<T&> {

  typedef T type;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename TString, typename Enable = void>

struct StringTraits {

  static const bool has_append = false;

  static const bool has_equals = false;

};

template <typename TString>

struct StringTraits<const TString, void> : StringTraits<TString> {};

template <typename TString>

struct StringTraits<TString&, void> : StringTraits<TString> {};

}

}

#if ARDUINOJSON_ENABLE_ARDUINO_STREAM

#include <Stream.h>

namespace ArduinoJson {

namespace Internals {

struct ArduinoStreamTraits {

  class Reader {

    Stream& _stream;

    char _current, _next;

   public:

    Reader(Stream& stream) : _stream(stream), _current(0), _next(0) {}

    void move() {

      _current = _next;

      _next = 0;

    }

    char current() {

      if (!_current) _current = read();

      return _current;

    }

    char next() {

      if (!_next) _next = read();

      return _next;

    }

   private:

    char read() {

      char c = 0;

      _stream.readBytes(&c, 1);

      return c;

    }

  };

  static const bool has_append = false;

  static const bool has_equals = false;

};

template <typename TStream>

struct StringTraits<

    TStream,

    typename EnableIf<

        IsBaseOf<Stream, typename RemoveReference<TStream>::type>::value>::type>

    : ArduinoStreamTraits {};

}

}

#endif

namespace ArduinoJson {

namespace Internals {

template <typename TChar>

struct CharPointerTraits {

  class Reader {

    const TChar* _ptr;

   public:

    Reader(const TChar* ptr)

        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {

      ++_ptr;

    }

    char current() const {

      return char(_ptr[0]);

    }

    char next() const {

      return char(_ptr[1]);

    }

  };

  static bool equals(const TChar* str, const char* expected) {

    return strcmp(reinterpret_cast<const char*>(str), expected) == 0;

  }

  static bool is_null(const TChar* str) {

    return !str;

  }

  typedef const char* duplicate_t;

  template <typename Buffer>

  static duplicate_t duplicate(const TChar* str, Buffer* buffer) {

    if (!str) return NULL;

    size_t size = strlen(reinterpret_cast<const char*>(str)) + 1;

    void* dup = buffer->alloc(size);

    if (dup != NULL) memcpy(dup, str, size);

    return static_cast<duplicate_t>(dup);

  }

  static const bool has_append = false;

  static const bool has_equals = true;

  static const bool should_duplicate = !IsConst<TChar>::value;

};

template <typename TChar>

struct StringTraits<TChar*, typename EnableIf<IsChar<TChar>::value>::type>

    : CharPointerTraits<TChar> {};

}

}

#if ARDUINOJSON_ENABLE_PROGMEM

namespace ArduinoJson {

namespace Internals {

template <>

struct StringTraits<const __FlashStringHelper*, void> {

  class Reader {

    const char* _ptr;

   public:

    Reader(const __FlashStringHelper* ptr)

        : _ptr(reinterpret_cast<const char*>(ptr)) {}

    void move() {

      _ptr++;

    }

    char current() const {

      return pgm_read_byte_near(_ptr);

    }

    char next() const {

      return pgm_read_byte_near(_ptr + 1);

    }

  };

  static bool equals(const __FlashStringHelper* str, const char* expected) {

    return strcmp_P(expected, (const char*)str) == 0;

  }

  static bool is_null(const __FlashStringHelper* str) {

    return !str;

  }

  typedef const char* duplicate_t;

  template <typename Buffer>

  static duplicate_t duplicate(const __FlashStringHelper* str, Buffer* buffer) {

    if (!str) return NULL;

    size_t size = strlen_P((const char*)str) + 1;

    void* dup = buffer->alloc(size);

    if (dup != NULL) memcpy_P(dup, (const char*)str, size);

    return static_cast<duplicate_t>(dup);

  }

  static const bool has_append = false;

  static const bool has_equals = true;

  static const bool should_duplicate = true;

};

}

}

#endif

#if ARDUINOJSON_ENABLE_STD_STREAM

#include <istream>

namespace ArduinoJson {

namespace Internals {

struct StdStreamTraits {

  class Reader {

    std::istream& _stream;

    char _current, _next;

   public:

    Reader(std::istream& stream) : _stream(stream), _current(0), _next(0) {}

    void move() {

      _current = _next;

      _next = 0;

    }

    char current() {

      if (!_current) _current = read();

      return _current;

    }

    char next() {

      if (!_next) _next = read();

      return _next;

    }

   private:

    Reader& operator=(const Reader&);  // Visual Studio C4512

    char read() {

      return _stream.eof() ? '\0' : static_cast<char>(_stream.get());

    }

  };

  static const bool has_append = false;

  static const bool has_equals = false;

};

template <typename TStream>

struct StringTraits<

    TStream,

    typename EnableIf<IsBaseOf<

        std::istream, typename RemoveReference<TStream>::type>::value>::type>

    : StdStreamTraits {};

}

}

#endif

#if ARDUINOJSON_ENABLE_STD_STRING || ARDUINOJSON_ENABLE_ARDUINO_STRING

#if ARDUINOJSON_ENABLE_ARDUINO_STRING

#include <WString.h>

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

#include <string>

#endif

namespace ArduinoJson {

namespace Internals {

template <typename TString>

struct StdStringTraits {

  typedef const char* duplicate_t;

  template <typename Buffer>

  static duplicate_t duplicate(const TString& str, Buffer* buffer) {

    if (!str.c_str()) return NULL;  // <- Arduino string can return NULL

    size_t size = str.length() + 1;

    void* dup = buffer->alloc(size);

    if (dup != NULL) memcpy(dup, str.c_str(), size);

    return static_cast<duplicate_t>(dup);

  }

  static bool is_null(const TString& str) {

    return !str.c_str();

  }

  struct Reader : CharPointerTraits<char>::Reader {

    Reader(const TString& str) : CharPointerTraits<char>::Reader(str.c_str()) {}

  };

  static bool equals(const TString& str, const char* expected) {

    return 0 == strcmp(str.c_str(), expected);

  }

  static void append(TString& str, char c) {

    str += c;

  }

  static void append(TString& str, const char* s) {

    str += s;

  }

  static const bool has_append = true;

  static const bool has_equals = true;

  static const bool should_duplicate = true;

};

#if ARDUINOJSON_ENABLE_ARDUINO_STRING

template <>

struct StringTraits<String, void> : StdStringTraits<String> {};

template <>

struct StringTraits<StringSumHelper, void> : StdStringTraits<StringSumHelper> {

};

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

template <>

struct StringTraits<std::string, void> : StdStringTraits<std::string> {};

#endif

}

}

#endif

namespace ArduinoJson {

namespace Internals {

class JsonVariantTag {};

template <typename T>

struct IsVariant : IsBaseOf<JsonVariantTag, T> {};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename TImpl>

class JsonVariantComparisons {

 public:

  template <typename TComparand>

  friend bool operator==(const JsonVariantComparisons &variant,

                         TComparand comparand) {

    return variant.equals(comparand);

  }

  template <typename TComparand>

  friend typename EnableIf<!IsVariant<TComparand>::value, bool>::type

  operator==(TComparand comparand, const JsonVariantComparisons &variant) {

    return variant.equals(comparand);

  }

  template <typename TComparand>

  friend bool operator!=(const JsonVariantComparisons &variant,

                         TComparand comparand) {

    return !variant.equals(comparand);

  }

  template <typename TComparand>

  friend typename EnableIf<!IsVariant<TComparand>::value, bool>::type

  operator!=(TComparand comparand, const JsonVariantComparisons &variant) {

    return !variant.equals(comparand);

  }

  template <typename TComparand>

  friend bool operator<=(const JsonVariantComparisons &left, TComparand right) {

    return left.as<TComparand>() <= right;

  }

  template <typename TComparand>

  friend bool operator<=(TComparand comparand,

                         const JsonVariantComparisons &variant) {

    return comparand <= variant.as<TComparand>();

  }

  template <typename TComparand>

  friend bool operator>=(const JsonVariantComparisons &variant,

                         TComparand comparand) {

    return variant.as<TComparand>() >= comparand;

  }

  template <typename TComparand>

  friend bool operator>=(TComparand comparand,

                         const JsonVariantComparisons &variant) {

    return comparand >= variant.as<TComparand>();

  }

  template <typename TComparand>

  friend bool operator<(const JsonVariantComparisons &varian,

                        TComparand comparand) {

    return varian.as<TComparand>() < comparand;

  }

  template <typename TComparand>

  friend bool operator<(TComparand comparand,

                        const JsonVariantComparisons &variant) {

    return comparand < variant.as<TComparand>();

  }

  template <typename TComparand>

  friend bool operator>(const JsonVariantComparisons &variant,

                        TComparand comparand) {

    return variant.as<TComparand>() > comparand;

  }

  template <typename TComparand>

  friend bool operator>(TComparand comparand,

                        const JsonVariantComparisons &variant) {

    return comparand > variant.as<TComparand>();

  }

 private:

  const TImpl *impl() const {

    return static_cast<const TImpl *>(this);

  }

  template <typename T>

  const typename JsonVariantAs<T>::type as() const {

    return impl()->template as<T>();

  }

  template <typename T>

  bool is() const {

    return impl()->template is<T>();

  }

  template <typename TString>

  typename EnableIf<StringTraits<TString>::has_equals, bool>::type equals(

      const TString &comparand) const {

    const char *value = as<const char *>();

    return StringTraits<TString>::equals(comparand, value);

  }

  template <typename TComparand>

  typename EnableIf<!IsVariant<TComparand>::value &&

                        !StringTraits<TComparand>::has_equals,

                    bool>::type

  equals(const TComparand &comparand) const {

    return as<TComparand>() == comparand;

  }

  template <typename TVariant2>

  bool equals(const JsonVariantComparisons<TVariant2> &right) const {

    using namespace Internals;

    if (is<bool>() && right.template is<bool>())

      return as<bool>() == right.template as<bool>();

    if (is<JsonInteger>() && right.template is<JsonInteger>())

      return as<JsonInteger>() == right.template as<JsonInteger>();

    if (is<JsonFloat>() && right.template is<JsonFloat>())

      return as<JsonFloat>() == right.template as<JsonFloat>();

    if (is<JsonArray>() && right.template is<JsonArray>())

      return as<JsonArray>() == right.template as<JsonArray>();

    if (is<JsonObject>() && right.template is<JsonObject>())

      return as<JsonObject>() == right.template as<JsonObject>();

    if (is<char *>() && right.template is<char *>())

      return strcmp(as<char *>(), right.template as<char *>()) == 0;

    return false;

  }

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct IsSignedIntegral {

  static const bool value =

      IsSame<T, signed char>::value || IsSame<T, signed short>::value ||

      IsSame<T, signed int>::value || IsSame<T, signed long>::value ||

#if ARDUINOJSON_USE_LONG_LONG

      IsSame<T, signed long long>::value ||

#endif

#if ARDUINOJSON_USE_INT64

      IsSame<T, signed __int64>::value ||

#endif

      false;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct IsUnsignedIntegral {

  static const bool value =

      IsSame<T, unsigned char>::value || IsSame<T, unsigned short>::value ||

      IsSame<T, unsigned int>::value || IsSame<T, unsigned long>::value ||

#if ARDUINOJSON_USE_LONG_LONG

      IsSame<T, unsigned long long>::value ||

#endif

#if ARDUINOJSON_USE_INT64

      IsSame<T, unsigned __int64>::value ||

#endif

      false;

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename T>

struct IsIntegral {

  static const bool value = IsSignedIntegral<T>::value ||

                            IsUnsignedIntegral<T>::value ||

                            IsSame<T, char>::value;

};

template <typename T>

struct IsIntegral<const T> : IsIntegral<T> {};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename TImpl>

class JsonVariantOr {

 public:

  template <typename T>

  typename EnableIf<!IsIntegral<T>::value, T>::type operator|(

      const T &defaultValue) const {

    if (impl()->template is<T>())

      return impl()->template as<T>();

    else

      return defaultValue;

  }

  const char *operator|(const char *defaultValue) const {

    const char *value = impl()->template as<const char *>();

    return value ? value : defaultValue;

  }

  template <typename Integer>

  typename EnableIf<IsIntegral<Integer>::value, Integer>::type operator|(

      const Integer &defaultValue) const {

    if (impl()->template is<double>())

      return impl()->template as<Integer>();

    else

      return defaultValue;

  }

 private:

  const TImpl *impl() const {

    return static_cast<const TImpl *>(this);

  }

};

}  // namespace Internals

}  // namespace ArduinoJson

namespace ArduinoJson {

namespace Internals {

class JsonArraySubscript;

template <typename TKey>

class JsonObjectSubscript;

template <typename TImpl>

class JsonVariantSubscripts {

 public:

  size_t size() const {

    return impl()->template as<JsonArray>().size() +

           impl()->template as<JsonObject>().size();

  }

  FORCE_INLINE const JsonArraySubscript operator[](size_t index) const;

  FORCE_INLINE JsonArraySubscript operator[](size_t index);

  template <typename TString>

  FORCE_INLINE

      typename EnableIf<StringTraits<TString>::has_equals,

                        const JsonObjectSubscript<const TString &> >::type

      operator[](const TString &key) const {

    return impl()->template as<JsonObject>()[key];

  }

  template <typename TString>

  FORCE_INLINE typename EnableIf<StringTraits<TString>::has_equals,

                                 JsonObjectSubscript<const TString &> >::type

  operator[](const TString &key) {

    return impl()->template as<JsonObject>()[key];

  }

  template <typename TString>

  FORCE_INLINE typename EnableIf<StringTraits<const TString *>::has_equals,

                                 JsonObjectSubscript<const TString *> >::type

  operator[](const TString *key) {

    return impl()->template as<JsonObject>()[key];

  }

  template <typename TString>

  FORCE_INLINE

      typename EnableIf<StringTraits<TString *>::has_equals,

                        const JsonObjectSubscript<const TString *> >::type

      operator[](const TString *key) const {

    return impl()->template as<JsonObject>()[key];

  }

 private:

  const TImpl *impl() const {

    return static_cast<const TImpl *>(this);

  }

};

}

}

namespace ArduinoJson {

namespace Internals {

class DummyPrint {

 public:

  size_t print(char) {

    return 1;

  }

  size_t print(const char* s) {

    return strlen(s);

  }

};

}

}

namespace ArduinoJson {

namespace Internals {

template <typename TString>

class DynamicStringBuilder {


